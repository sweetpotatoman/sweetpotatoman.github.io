(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{355:function(t,s,a){"use strict";a.r(s);var e=a(9),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("由于安全因素和网络因素在访问一些网站时需要使用代理，下面简要介绍下各种工具配置使用代理")])]),t._v(" "),a("p",[t._v("很多人在工作中，使用一些工具不配置代理，很多因为网络问题经常出现进度条毫无动静，还会出现 "),a("code",[t._v("connection refused")]),t._v(" or "),a("code",[t._v("time out")]),t._v(" 等的报错")]),t._v(" "),a("p",[a("strong",[t._v("以下是各工具配置代理的方法")])]),t._v(" "),a("h3",{attrs:{id:"pip"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pip"}},[t._v("#")]),t._v(" pip")]),t._v(" "),a("ol",[a("li",[t._v("使用 pip 的 "),a("code",[t._v("–proxy")]),t._v(" 指定代理")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("pip --proxy"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("http://username:password@proxyURL:portNumber "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" xxx\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("当然你也可以配置国内源的方式解决网络问题")])]),t._v(" "),a("p",[t._v("各系统 pip 配置位置 (没有找到目录或者文件的，创建新的即可)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Linux/Unix:\n/etc/pip.conf\n~/.pip/pip.conf\n~/.config/pip/pip.conf\n \nMac OSX:\n~/Library/Application Support/pip/pip.conf\n~/.pip/pip.conf\n/Library/Application Support/pip/pip.conf\n\nWindows:\n%APPDATA%\\pip\\pip.ini\n%HOME%\\pip\\pip.ini\n")])])]),a("p",[t._v("pip.conf")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[global]\nindex-url = http://pypi.douban.com/simple #豆瓣源，可以换成其他的源\nextra-index-url = https://pypi.tuna.tsinghua.edu.cn/simple\ntrusted-host = \n    pypi.douban.com            #添加豆瓣源为可信主机，要不然可能报错\n    pypi.tuna.tsinghua         #清华\ntimeout = 120\n")])])]),a("p",[t._v("其它源")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("清华：https://pypi.tuna.tsinghua.edu.cn/simple\n阿里云：http://mirrors.aliyun.com/pypi/simple/\n中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/\n华中理工大学：http://pypi.hustunique.com/\n山东理工大学：http://pypi.sdutlinux.org/ \n豆瓣：http://pypi.douban.com/simple/\n")])])]),a("ul",[a("li",[t._v("为了使用更方便，可以使用 "),a("code",[t._v("alias pip")]),t._v(" 配置使用代理方式")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("alias")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("pip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pip --proxy 127.0.0.1:xxxx"')]),t._v("\n")])])]),a("h3",{attrs:{id:"wget"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wget"}},[t._v("#")]),t._v(" wget")]),t._v(" "),a("ol",[a("li",[t._v("使用配置文件 "),a("code",[t._v("~/.wgetrc")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("use_proxy=yes\nhttp_proxy=127.0.0.1:8080\nhttps_proxy=127.0.0.1:8080\n")])])]),a("ol",[a("li",[t._v("使用 "),a("code",[t._v("-e")]),t._v(" 参数\n"),a("code",[t._v("wget")]),t._v(" 本身没有专门设置代理的命令行参数，但是有一个 "),a("code",[t._v("-e")]),t._v(" 参数，可以在命令行上指定一个原本出现在 "),a("code",[t._v(".wgetrc")]),t._v(" 中的设置")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("wget ... -e use_proxy=yes -e http_proxy=127.0.0.1:8080 ...\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("在环境变量中设置代理")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("export http_proxy=http://proxy_host:proxy_port\n\n# 验证方式\nexport http_proxy=http://username:password@proxy_host:proxy_port\n")])])]),a("ul",[a("li",[t._v("为了使用更方便，可以使用 "),a("code",[t._v("alias wget-proxy")]),t._v(" 配置使用代理方式")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("alias")]),t._v(" wget-proxy"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wget -e use_proxy=yes -e http_proxy=127.0.0.1:8080 -e https_proxy=127.0.0.1:8080"')]),t._v("\n")])])]),a("h3",{attrs:{id:"curl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#curl"}},[t._v("#")]),t._v(" curl")]),t._v(" "),a("ol",[a("li",[t._v("使用 "),a("code",[t._v("-x")]),t._v(" 参数")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 指定http代理IP和端口\ncurl -x 127.0.0.1:8080 https://google.com\n\n#指定为 http 代理\ncurl -x http_proxy://127.0.0.1:8080 https://google.com\n \n#指定为https代理\ncurl -x HTTPS_PROXY://1127.0.0.1:8080 https://google.com\n \n#指定代理用户名和密码，basic认证方式\ncurl -x admin:123456@127.0.0.1:8080 https://google.com\ncurl -x 127.0.0.1:8080 -U admin:123456 https://google.com\ncurl -x 127.0.0.1:8080 --proxy-user admin:123456 https://google.com\n \n#指定代理用户名和密码，ntlm认证方式\ncurl -x 127.0.0.1:8080 -U admin:123456 --proxy-ntlm https://google.com\n \n#指定代理协议、用户名和密码，basic认证方式\ncurl -x http_proxy://admin:123456@127.0.0.1:8080 https://google.com\n\n#使用 socks 协议方式\ncurl -x socks5://[user:password@]proxyhost[:port]/ url\ncurl --socks5 127.0.0.1:8080 https://google.com\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("编辑 "),a("code",[t._v("~/.curlrc")]),t._v(" (如果没有该文件，新建即可)")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('proxy = 127.0.0.1:8080\n\n# 如果需要认证方式\nproxy-user = "foo:bar"\n')])])]),a("ul",[a("li",[t._v("为了使用更方便，可以使用 "),a("code",[t._v("alias curl-proxy")]),t._v(" 配置使用代理方式")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('alias curl-proxy="curl -x 127.0.0.1:8080"\n')])])]),a("h3",{attrs:{id:"npm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#npm"}},[t._v("#")]),t._v(" npm")]),t._v(" "),a("ol",[a("li",[t._v("命令行参数")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npm install --proxy http://127.0.0.1:8080\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("npm 配置的命令行操作")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('# 配置 http 代理\nnpm config set proxy "http://127.0.0.1:8080"\nnpm config set https-proxy "http://127.0.0.1:8080"\n# 有用户密码的代理\nnpm config set proxy "http://username:password@127.0.0.1:8080"\n\n# npm 不支持 socks 代理，但是我们可以用一个工具将 http 代理转成 socks 代理\nnpm install -g http-proxy-to-socks\n# 然后使用这个工具监听 8080 端口,支持 http 代理，然后所有 8080 的 http 代理数据都将转换成 socks 的代理数据发送到 9090 上\nhpts -s 127.0.0.1:9090 -p 8080\n# 最后设置 npm 代理为 8080\nnpm config set proxy "http://127.0.0.1:8080"\nnpm config set https-proxy "http://127.0.0.1:8080"\n\n# 相当于又加了一个中间层，将 http 转成 socks\n')])])]),a("ul",[a("li",[t._v("删除代理\n"),a("ul",[a("li",[t._v("npm config delete proxy")]),t._v(" "),a("li",[t._v("npm config delete https-proxy")])])])]),t._v(" "),a("h3",{attrs:{id:"git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" git")]),t._v(" "),a("ol",[a("li",[t._v("http or https 协议")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 设置全局代理\ngit config --global https.proxy http://127.0.0.1:8080\ngit config --global https.proxy https://127.0.0.1:8080\n\ngit config --global http.proxy socks5://127.0.0.1:8080\ngit config --global https.proxy socks5://127.0.0.1:8080\n\n# 只对 github.com 使用代理，其他仓库不走代理\ngit config --global http.https://github.com.proxy socks5://127.0.0.1:8080\ngit config --global https.https://github.com.proxy socks5://127.0.0.1:8080\n# 取消 github 代理\ngit config --global --unset http.https://github.com.proxy\ngit config --global --unset https.https://github.com.proxy\n\n# 取消全局代理\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("ssh 协议")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 对于使用 git@ 协议的，可以配置 socks5 代理\n# 在 ~/.ssh/config 文件后面添加几行，没有可以新建一个\n# socks5\nHost github.com\nUser git\nProxyCommand connect -S 127.0.0.1:1080 %h %p\n\n# http or https\nHost github.com\nUser git\nProxyCommand connect -H 127.0.0.1:1080 %h %p\n")])])]),a("h3",{attrs:{id:"docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[t._v("#")]),t._v(" docker")]),t._v(" "),a("ol",[a("li",[t._v("配置环境变量")])]),t._v(" "),a("p",[t._v("创建目录")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mkdir /etc/systemd/system/docker.service.d\n")])])]),a("p",[t._v("在该目录创建一个 "),a("strong",[t._v("http-proxy.conf")]),t._v(" 文件，并添加以下变量")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("vim /etc/systemd/system/docker.service.d/http-proxy.conf\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('[Service]\nEnvironment="HTTP_PROXY=http://user01:password@10.10.10.10:8080/"\nEnvironment="HTTPS_PROXY=https://user01:password@10.10.10.10:8080/"\nEnvironment="NO_PROXY= hostname.example.com,172.10.10.10"\n')])])]),a("p",[t._v("reload systemd daemon")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("systemctl daemon-reload\n")])])]),a("p",[t._v("restart docker")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("systemctl restart docker\n")])])]),a("h3",{attrs:{id:"maven"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#maven"}},[t._v("#")]),t._v(" maven")]),t._v(" "),a("h3",{attrs:{id:"kubectl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubectl"}},[t._v("#")]),t._v(" kubectl")])])}),[],!1,null,null,null);s.default=n.exports}}]);